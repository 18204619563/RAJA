#default build suggestion of MPI + OPENMP with gcc on Livermore machines you might have to change the compiler name

SHELL = /bin/sh
.SUFFIXES: .cc .o

LULESH_EXEC = lulesh2.0

MPI_INC = /opt/local/include/openmpi
MPI_LIB = /opt/local/lib

#Common defines
MY_DEFS = -DUSE_MPI=0 -DUSE_OMP=1

#Build with Intel compiler
#CXX  = /usr/local/tools/ic-14.0.144/bin/icpc 
#CXX  = /usr/local/tools/ic-14.0.174/bin/icpc 
CXX  = /usr/local/tools/ic-15.0.024-beta/bin/icpc 

#Build with GNU compiler
#SERCXX = g++ -DUSE_MPI=0
#MPICXX = mpig++ -DUSE_MPI=1
#CXX = $(MPICXX)
#CXX             = /usr/apps/gnu/4.9.0/bin/g++
#CXX             = /usr/local/tools/compilers/ibm/mpicxx-4.7.2

#Build with xlc compiler
#CXX = /usr/local/tools/compilers/ibm/mpixlcxx_r-lompbeta2-fastmpi
#CXX = /usr/local/tools/compilers/ibm/mpixlcxx_r

SOURCES2.0 = \
	lulesh.cc \
	lulesh-comm.cc \
	lulesh-viz.cc \
	lulesh-util.cc \
	lulesh-init.cc
OBJECTS2.0 = $(SOURCES2.0:.cc=.o)

#Default build suggestions with OpenMP for GNU compiler
#CXXFLAGS = -g -O3 -fopenmp -I. -Wall
#LDFLAGS = -g -O3 -fopenmp
#CXXFLAGS = -Ofast -msse4.1 -finline-functions -finline-limit=20000 -std=c++11 -fopenmp $(MY_DEFS)
#LDFLAGS = -Ofast -msse4.1 -finline-functions -finline-limit=20000 -std=c++11 -fopenmp
#CXXFLAGS = -Ofast -mcpu=a2 -mtune=a2 -finline-functions -finline-limit=20000 -std=c++0x -fopenmp $(MY_DEFS)
#LDFLAGS = -Ofast -mcpu=a2 -mtune=a2 -finline-functions -finline-limit=20000 -std=c++0x -fopenmp

#Build with OpenMP for Intel compiler
#CXXFLAGS = -O3 -mavx -inline-max-total-size=20000 -inline-forceinline -ansi-alias -std=c++0x -openmp -static-intel $(MY_DEFS)
CXXFLAGS = -O3 -msse4.1 -inline-max-total-size=20000 -inline-forceinline -ansi-alias -std=c++0x -openmp -static-intel $(MY_DEFS)
#CXXFLAGS = -O2 -msse4.1 -inline-max-total-size=20000 -inline-forceinline -ansi-alias -std=c++0x -openmp -static-intel $(MY_DEFS)
#CXXFLAGS = -O1 -g -msse4.1 -inline-max-total-size=20000 -inline-forceinline -ansi-alias -std=c++0x -openmp -static-intel $(MY_DEFS)
#LDFLAGS = -openmp

#Build with OpenMP for xlc compiler
#CXXFLAGS = -O3 -qarch=qp -qhot=novector -qsimd=auto -qlanglvl=extended0x -qnostrict -qinline=auto:level=10 -qsmp=omp $(MY_DEFS)
#LDFLAGS = -O3 -qsmp=omp -qdebug=lompinterface
#LDFLAGS = -O3 -qsmp=omp 

#Below are reasonable default flags for a serial build
#CXXFLAGS = -g -O3 -I. -Wall
#LDFLAGS = -g -O3 

#common places you might find silo on the Livermore machines.
#SILO_INCDIR = /opt/local/include
#SILO_LIBDIR = /opt/local/lib
#SILO_INCDIR = ./silo/4.9/1.8.10.1/include
#SILO_LIBDIR = ./silo/4.9/1.8.10.1/lib

#If you do not have silo and visit you can get them at:
#silo:  https://wci.llnl.gov/codes/silo/downloads.html
#visit: https://wci.llnl.gov/codes/visit/download.html

#below is and example of how to make with silo, hdf5 to get vizulization by default all this is turned off.  All paths are Livermore specific.
#CXXFLAGS = -g -DVIZ_MESH -I${SILO_INCDIR} -Wall -Wno-pragmas
#LDFLAGS = -g -L${SILO_LIBDIR} -Wl,-rpath -Wl,${SILO_LIBDIR} -lsiloh5 -lhdf5

.cc.o: lulesh.h
	@echo "Building $<"
	$(CXX) -c $(CXXFLAGS) -o $@  $<

all: $(LULESH_EXEC)

lulesh2.0: $(OBJECTS2.0)
	@echo "Linking"
	$(CXX) $(OBJECTS2.0) $(LDFLAGS) -lm -o $@

clean:
	/bin/rm -f *.o *~ $(OBJECTS) $(LULESH_EXEC)
	/bin/rm -rf *.dSYM

tar: clean
	cd .. ; tar cvf lulesh-2.0.tar LULESH-2.0 ; mv lulesh-2.0.tar LULESH-2.0

